{"version":3,"file":"static/js/46.7eb0c64a.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/profile/profileinfo/ProfileInfo.module.css?5eda","components/profile/profileinfo/ProfileStatusWithHooks.tsx","components/profile/profileinfo/ProfileDataForm.tsx","components/profile/profileinfo/ProfileInfo.tsx","webpack://my-app/./src/components/profile/myposts/MyPosts.module.css?960d","webpack://my-app/./src/components/profile/myposts/post/Post.module.css?8492","components/profile/myposts/post/Post.tsx","components/profile/myposts/AddNewPostForm.tsx","components/profile/myposts/MyPosts.tsx","components/profile/myposts/MyPostsContainer.tsx","components/profile/Profile.tsx","utils/oldHOC/withRouter.js","components/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"description_block\":\"ProfileInfo_description_block__M4B4k\",\"userPhoto\":\"ProfileInfo_userPhoto__fJP7H\"};","import React, {ChangeEvent, useEffect, useState} from \"react\"\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {editMode === true\r\n                ?\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n                :\r\n                <div onDoubleClick={activateEditMode}>\r\n                    <span>Your status:</span>\r\n                    <span >{props.status}</span>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../../login/Login.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormOwnPropsType>\r\n    & ProfileDataFormOwnPropsType> = ({profile, handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {error && <div className={s.form_summary_error}>{error}</div>}\r\n            <div>\r\n                <b>Full name</b>: {createField<ProfileDataFormKeysType>('Full name','fullName', Input,\r\n                [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField<ProfileDataFormKeysType>('','lookingForAJob', Input,\r\n                [], {type: 'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField<ProfileDataFormKeysType>('My professional skills',\r\n                'lookingForAJobDescription', Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField<ProfileDataFormKeysType>('About me', 'aboutMe', Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n                <ul>\r\n                    {/*todo: create some solution for embedded objects*/}\r\n                    {Object.keys(profile.contacts).map((key) => (\r\n                            <b key={key}>{key}: {createField\r\n                            (key, 'contacts.' + key, Input, [])}</b>\r\n                    ))}\r\n                </ul>\r\n                {/*{!Object.values(profile.contacts).every(value => value === null) && <Contacts profile={profile}/>}*/}\r\n            </div>\r\n        </form>)\r\n}\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileDataFormOwnPropsType>\r\n({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm\r\n\r\ntype ProfileDataFormOwnPropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileDataFormKeysType = GetStringKeys<ProfileType>","import React, {useState} from \"react\"\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport defaultUsersPhoto from '../../../assets/photos/default_user_image.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo: remove then\r\n        saveProfile(formData)\r\n            .then(() => setEditMode(false))\r\n    }\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.description_block}>\r\n                <div><img src={profile.photos.large === null\r\n                    ? defaultUsersPhoto\r\n                    : profile.photos.large}\r\n                          alt='User photo' className={s.userPhoto}/>\r\n                </div>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues = {profile}\r\n                                       profile={profile}\r\n                                       onSubmit = {onSubmit}\r\n\r\n                    />\r\n                    : <ProfileData profile={profile}\r\n                                   isOwner = {isOwner}\r\n                                   activateEditMode = {() => setEditMode(true)}/> }\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, activateEditMode}) => {\r\n    return (\r\n        <div>\r\n                {isOwner && <div><button onClick={activateEditMode}>Edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob === true ? 'Yes' : 'No'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                {!Object.values(profile.contacts).every(value => value === null) && <Contacts contacts={profile.contacts}/>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({contacts}) => {\r\n    return (\r\n        <div>\r\n            <h3>Contacts:</h3>\r\n            <ul>\r\n                {Object.entries(contacts).map(([key, value]) => (\r\n                    !!value && <li key={key}>\r\n                        <h5>{key}: <a href={value}>{value}</a></h5>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\ntype ContactsPropsType = {\r\n    contacts: ContactsType\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__gk+-H\",\"posts\":\"MyPosts_posts__vq8GB\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__J4Byi\"};","import React from \"react\"\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n    return  (\r\n      <div className={s.item}>\r\n        <img src={props.urlPhoto}></img>\r\n         {props.message}\r\n         <div>\r\n          {props.LikesAmount}\r\n          <span> Like</span>\r\n         </div>\r\n      </div>\r\n    )\r\n}\r\nexport default Post\r\n\r\ntype PropsType = {\r\n    urlPhoto: string\r\n    message: string\r\n    LikesAmount: number\r\n}","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\n\r\nconst AddNewPostForm:  React.FC<InjectedFormProps<AddPostFormValuesType, AddPostFormOwnProps> & AddPostFormOwnProps>= (props) => {\r\n    const maxLength15 = maxLengthCreator(15)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>('Enter your post','newPostText',Textarea,\r\n                    [requiredField, maxLength15])}\r\n{/*                <Field component={Textarea} name='newPostText' placeholder='Enter your post'\r\n                       validate={[requiredField, maxLength15]}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddNewPostFormRedux = reduxForm<AddPostFormValuesType, AddPostFormOwnProps>\r\n({form: 'profileAddPostForm'})(AddNewPostForm)\r\n\r\nexport type AddPostFormValuesType = {newPostText: string}\r\ntype AddPostFormOwnProps = {}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>","import React from \"react\"\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./post/Post\";\r\nimport {AddNewPostFormRedux, AddPostFormValuesType} from \"./AddNewPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nconst MyPosts: React.FC<PropsType> =(props) => {\r\n    let postsElements = [...props.postsData]\r\n        .reverse()\r\n        .map( (p,index) =>\r\n            <div key = {index}>\r\n                <Post LikesAmount={p.likesCount} message={p.message} urlPhoto={p.url}/>\r\n            </div>);\r\n    const addNewPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return  (\r\n    <div className={s.postsBlock}>\r\n        <h3>My Posts</h3>\r\n        <div >\r\n          <AddNewPostFormRedux onSubmit = {addNewPost}/>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n   </div>\r\n    )\r\n}\r\nconst MyPostMemorized = React.memo(MyPosts)\r\nexport default MyPostMemorized\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType\r\nexport type MapPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (post: string) => void\r\n}","import {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(actions.addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}*/\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>\r\n(mapStateToProps,{\r\n    addPost: actions.addPostActionCreator})(MyPosts);\r\nexport default MyPostsContainer","import React from \"react\"\r\nimport ProfileInfo from \"./profileinfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profile}\r\n                         status = {props.status}\r\n                         updateUserStatus = {props.updateUserStatus}\r\n                         isOwner = {props.isOwner}\r\n                         savePhoto = {props.savePhoto}\r\n                         saveProfile = {props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}","import {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n// wrapper to use react router's v6 hooks in class component(to use HOC pattern, like in router v5)\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\nexport default withRouter","import React from \"react\"\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileDataThunk,\r\n    getUserStatusThunk,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatusThunk\r\n} from \"../../redux/profile-reducer\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport withRouter from \"../../utils/oldHOC/withRouter\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {NavigateFunction} from \"react-router-dom\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n/*    constructor(props: PropsType) {\r\n        debugger\r\n        super(props);\r\n    }*/\r\n    refreshProfile() {\r\n        // @ts-ignore\r\n        let userId: number | null  = +this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        if (!userId) {\r\n            console.error('User id should exists in URI params or in the state')\r\n        }\r\n        else {\r\n            this.props.getProfileDataThunk(userId)\r\n            this.props.getUserStatusThunk(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile = {this.props.profile}\r\n                         status = {this.props.status}\r\n                         updateUserStatus = {this.props.updateUserStatusThunk}\r\n                         isOwner = {!this.props.router.params.userId}\r\n                         savePhoto = {this.props.savePhoto}\r\n                         saveProfile = {this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getProfileDataThunk,getUserStatusThunk,updateUserStatusThunk,savePhoto,saveProfile}),\r\n    withRouter)\r\n(ProfileContainer)\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getProfileDataThunk: (userId: number) => void\r\n    getUserStatusThunk: (userId: number) => void\r\n    updateUserStatusThunk: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PropsType = MapPropsType & DispatchPropsType & withRouterProps\r\ntype withRouterProps = {\r\n    router: {\r\n        location: Location\r\n        navigate: NavigateFunction\r\n        params: Record<\"userId\", string | undefined>\r\n    };\r\n}","import {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {JSX} from \"react/jsx-dev-runtime\";\r\n\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\nfunction withAuthRedirect<WrappedComponentProps extends JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WrappedComponentProps>\r\n) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!props.isAuth) return <Navigate to='/login'/>\r\n        return <WrappedComponent {...restProps as WrappedComponentProps}/>\r\n    }\r\n    return  connect<MapPropsType,DispatchPropsType,WrappedComponentProps,AppStateType>(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n}\r\nexport default withAuthRedirect"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onDoubleClick","reduxForm","form","profile","handleSubmit","error","onSubmit","className","s","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","activateEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","values","every","Contacts","entries","href","savePhoto","saveProfile","Preloader","src","photos","large","defaultUsersPhoto","alt","target","files","length","initialValues","formData","then","urlPhoto","message","LikesAmount","AddNewPostFormRedux","maxLength15","maxLengthCreator","requiredField","MyPosts","postsElements","postsData","reverse","p","index","likesCount","url","addPost","newPostText","React","connect","state","profilePage","actions","Component","location","useLocation","navigate","useNavigate","params","useParams","router","ProfileContainer","userId","this","authorizedUserId","getProfileDataThunk","getUserStatusThunk","console","refreshProfile","prevProps","prevState","updateUserStatusThunk","compose","withAuthRedirect","auth","isAuth","withRouter","mapStateToPropsForRedirect","WrappedComponent","restProps","to"],"sourceRoot":""}