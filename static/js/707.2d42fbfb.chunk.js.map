{"version":3,"file":"static/js/707.2d42fbfb.chunk.js","mappings":"gKACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCajN,EAVwC,SAACA,GAErC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,iBAAKC,UAAW,CAACC,EAAAA,OAAUA,EAAAA,QAAUC,KAAK,KAAK,WAC5C,gBAAKC,IAAKN,EAAMO,WAAW,KAAC,kBAAK,KAAC,SAAC,KAAO,CAACC,GAAIP,EAAK,SAAED,EAAMS,SAGvE,ECLA,EAJqC,SAACT,GAClC,OAAO,gBAAKG,UAAWC,EAAAA,QAAU,SAAEJ,EAAMU,SAC7C,E,6BCiBaC,GAAsBC,EAAAA,EAAAA,GAClC,CAACC,KAAM,wBAD2BD,EAfb,SAACZ,GACnB,IAAMc,GAAcC,EAAAA,EAAAA,GAAiB,IACrC,OACI,kBAAMC,SAAUhB,EAAMiB,aAAa,WAC/B,0BAEKC,EAAAA,EAAAA,IAA0C,qBAAsB,oBAC7DC,EAAAA,GAAU,CAACC,EAAAA,EAAeN,OAElC,0BACI,2FAIhB,ICeA,EA7BqC,SAACd,GAC9B,IAAIqB,EAAQrB,EAAMsB,YACdC,EAAkBF,EAAMG,YACvBC,KAAK,SAACC,EAAEC,GAAK,OACV,0BACI,SAAC,EAAU,CAACzB,GAAIwB,EAAExB,GAAIO,KAAMiB,EAAEjB,KAAMF,SAAUmB,EAAEE,OAD1CD,EAEJ,IACVE,EAAmBR,EAAMS,aACxBL,KAAK,SAACM,EAAEJ,GAAK,OACV,0BACI,SAAC,EAAO,CAACjB,QAASqB,EAAErB,WADdiB,EAEJ,IAKlB,OACI,iBAAKxB,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAYC,EAAAA,aAAe,SAC3BmB,KAEL,gBAAKpB,UAAWC,EAAAA,SAAW,SACtByB,KAEL,SAAClB,EAAmB,CAACK,SAXL,SAACgB,GACjBhC,EAAMiC,wBAAwBD,EAAYE,kBAC9C,MAYR,E,wCCXA,GAAeC,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAhBkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IAY4B,UAAKgB,EAAAA,IAFjC,CAGCC,E,mGCjBGC,EAA6B,SAACnB,GAAmB,MAAM,CACvDoB,OAAQpB,EAAMqB,KAAKD,OACtB,EAcD,IATA,SAAiFE,GAO7E,OAAQN,EAAAA,EAAAA,IAA2EG,EAA2B,CAAC,EAAvGH,EAL8D,SAACrC,GACtCA,EAAxByC,OAAL,IAAgBG,GAAS,OAAI5C,EAAK,GAClC,OAAIA,EAAMyC,QACH,SAACE,GAAgB,UAAKC,KADJ,SAAC,KAAQ,CAACpC,GAAG,UAE1C,GAEJ,C","sources":["webpack://my-app/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/dialogitem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/AddMessageForm.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__pYOtN\",\"dialogsItems\":\"Dialogs_dialogsItems__pIwWH\",\"dialog\":\"Dialogs_dialog__Vi3y6\",\"active\":\"Dialogs_active__Lpw4l\",\"messages\":\"Dialogs_messages__lOLnm\",\"message\":\"Dialogs_message__v3jxH\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={[s.dialog, s.active].join(' ')}>\r\n           <img src={props.urlPhoto}/> <br/> <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n\r\ntype PropsType = {\r\n    id: number\r\n    urlPhoto: string\r\n    name: string\r\n}","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message\r\n\r\ntype PropsType = {message: string}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {NewMessageFormValuesType} from \"./Dialogs\";\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, OwnPropsType>\r\n    & OwnPropsType> = (props) => {\r\n    const maxLength15 = maxLengthCreator(15)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {/*<Field name = 'newMessageElement' placeholder='Enter your message' component={Textarea} validate={[requiredField,maxLength15]}/>*/}\r\n                {createField<NewMessageFormValuesTypeKeys>('Enter your message', 'newMessageElement',\r\n                    Textarea, [requiredField, maxLength15])}\r\n            </div>\r\n            <div>\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType, OwnPropsType>\r\n({form: 'dialogAddMassageForm'})(AddMessageForm)\r\n\r\ntype OwnPropsType = {}\r\ntype NewMessageFormValuesTypeKeys = Extract<keyof NewMessageFormValuesType, string>","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./dialogitem/DialogItem\";\r\nimport Message from \"./message/Message\";\r\nimport {InitialStateType} from \"../../redux/message-reducer\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm\";\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n        let state = props.dialogsPage;\r\n        let dialogsElements = state.dialogsData\r\n            .map( (d,index) =>\r\n                <div key={index}>\r\n                    <DialogItem id={d.id} name={d.name} urlPhoto={d.url}/>\r\n                </div>);\r\n        let messagesElements = state.messagesData\r\n            .map( (m,index) =>\r\n                <div key={index}>\r\n                    <Message message={m.message}/>\r\n                </div> );\r\n\r\n        let addNewMessage = (messageData: NewMessageFormValuesType) => {\r\n            props.addMessageActionCreator(messageData.newMessageElement);\r\n        }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className ={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit = {addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    addMessageActionCreator: (message: string) => void\r\n}\r\nexport type NewMessageFormValuesType = {\r\n    newMessageElement: string\r\n}\r\n","\r\nimport React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {actions} from \"../../redux/message-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessage) => {\r\n            dispatch(actions.addMessageActionCreator(newMessage));\r\n        }\r\n    }\r\n}*/\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {...actions}))\r\n(Dialogs)","import {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {JSX} from \"react/jsx-dev-runtime\";\r\n\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\nfunction withAuthRedirect<WrappedComponentProps extends JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WrappedComponentProps>\r\n) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!props.isAuth) return <Navigate to='/login'/>\r\n        return <WrappedComponent {...restProps as WrappedComponentProps}/>\r\n    }\r\n    return  connect<MapPropsType,DispatchPropsType,WrappedComponentProps,AppStateType>(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n}\r\nexport default withAuthRedirect"],"names":["props","path","id","className","s","join","src","urlPhoto","to","name","message","AddMessageFormRedux","reduxForm","form","maxLength15","maxLengthCreator","onSubmit","handleSubmit","createField","Textarea","requiredField","state","dialogsPage","dialogsElements","dialogsData","map","d","index","url","messagesElements","messagesData","m","messageData","addMessageActionCreator","newMessageElement","compose","withAuthRedirect","connect","actions","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps"],"sourceRoot":""}